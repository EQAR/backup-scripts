#!/bin/bash

############################################################
##################### CONSTANTS ############################
############################################################

Timefile=".snapshot-timestamp"

indent() { sed 's/^/   /'; }
die()    { echo "Error: $1" >&2 ; exit $2; }
warn()   { echo "Warning: $1" >&2 ; }

############################################################

set -o pipefail -o nounset

Self=$(basename $0)

OPTIONS=ivn
LONGOPTS=initial,verbose,dry-run

! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$Self" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    die "getopts problem" 10
fi

# read getoptâ€™s output this way to handle the quoting right:
eval set -- "$PARSED"

Initial=n
Verbose=n
DryRun=n
# now enjoy the options in order and nicely split until we see --
while true
do
	case "$1" in
        	-i|--initial)
			Initial=y
			shift
			;;
        	-v|--verbose)
			Verbose=y
			shift
			;;
        	-n|--dry-run)
			DryRun=y
			shift
			;;
		--)
			shift
			break
			;;
		*)
			die "Programming error" 11
			;;
	esac
done

# handle non-option arguments
[[ $# -ne 1 ]] && die "$Self: A single configuration file is required." 12

############################################################

if [ -f "$1" -a -r "$1" ]; then
	# source the job config
	source "$1"
	if [ -z ${Job+x} ]; then
		Job=$(basename -s .conf $1)
	fi
	Self="${Self}@${Job}"
else
	# config not found or not readable
	die "$Self: configuration file $1 not found or not readable." 20
fi

############################################################
############################################################
############################################################

if [ -e "${LIB_DIR}/${Job}.last" ]
then	
	# if we have a last snapshot tag, we shouldn't be on an initial run
	[ "$Initial"  = "y" ] && die "Error: initial run chosen, but prior snapshot exists. Remove ${LIB_DIR}/${Job}.last to recreate initial snapshot." 30
	[ -r "${LIB_DIR}/${Job}.last" ] || die "${LIB_DIR}/${Job}.last is not readable." 31
	Oldstamp="`cat \"${LIB_DIR}/${Job}.last\"`"
else	
	# if we have no last snapshot tag saved, we should have been called as initial run
	[ "$Initial" != "y" ] && die "Error: cannot read tag of last snapshot from ${LIB_DIR}/${Job}.last, and --initial was not passed." 32
fi

############################################################

touch "${BACKUP_TREE}/${Timefile}" || die "Cannot touch(1) timestamp file '${BACKUP_TREE}/${Timefile}'" 33

chmod 0444 "${BACKUP_TREE}/${Timefile}" || warn "Could not make timestamp file '${BACKUP_TREE}/${Timefile}' read-only."

Timestamp="`date ${TAG_OPTIONS:-} -r \"${BACKUP_TREE}/${Timefile}\" +\"${TAG}\"`"
[ -z ${Timestamp+x} ] && die "Problem generating new snapshot tag." 34

echo "Creating new snapshot of ${BACKUP_TREE}:"
echo " new tag:  $Timestamp" 
echo " last tag: ${Oldstamp:-INITIAL RUN}"
echo " target:   $REMOTE_BASE"
echo

[ -n "${LOCK_DIR:+x}" ] && [ -e "${LOCK_DIR}/${Job}" ] && die "Snapshot already in progress, exiting." 40

echo -n "1. Placing lock file: "

if [ -n "${LOCK_DIR:+x}" ]	# lock dir is optional
then
	if [ ! -d "${LOCK_DIR}" ]	# it might rest on a temporary filesystem
	then
		mkdir -p ${LOCK_DIR} || die "Failed, could not create directory ${LOCK_DIR}." 50
	fi
	touch "${LOCK_DIR}/${Job}" && echo "OK." || die "Failed." 55
else
	echo "[ skipped - LOCK_DIR not set]"
fi

############################################################

if [ -z ${Oldstamp+x} ]
then
	
	echo "2. Initial run, skipping check of previous snapshot."

else

	echo -n "2. Checking if last tag exists: "

	rsync "${REMOTE_AUTH[@]}" "${REMOTE_BASE}$Oldstamp/" > /dev/null

	if [ $? -eq 0 ]
	then
		echo "OK."
	else
		die "Failed: rsync returned $?." 60
	fi

fi

############################################################

if [ ! -d ${LOG_DIR}/${Job} ]
then
	mkdir -p ${LOG_DIR}/${Job} || die "Error: could not create log directory ${LOG_DIR}/${Job}." 70
fi

if [ -z ${Oldstamp+x} ]
then
	echo -n "3. Creating initial snapshot: "
	if [ "$DryRun"  = "n" ]
	then
		rsync -ai "${REMOTE_AUTH[@]}" --filter="dir-merge ${BACKUP_FILTER}" "${BACKUP_TREE}/" "${REMOTE_BASE}$Timestamp/" > "${LOG_DIR}/${Job}/${Timestamp}"
	else
		echo
		rsync -aivn "${REMOTE_AUTH[@]}" --filter="dir-merge ${BACKUP_FILTER}" "${BACKUP_TREE}/" "${REMOTE_BASE}$Timestamp/"
	fi
else
	echo -n "3. Creating new snapshot: "
	if [ "$DryRun"  = "n" ]
	then
		rsync -ai "${REMOTE_AUTH[@]}" --filter="dir-merge ${BACKUP_FILTER}" --link-dest="../$Oldstamp" "${BACKUP_TREE}/" "${REMOTE_BASE}$Timestamp/" > "${LOG_DIR}/${Job}/${Timestamp}"
	else
		echo
		rsync -aivn "${REMOTE_AUTH[@]}" --filter="dir-merge ${BACKUP_FILTER}" --link-dest="../$Oldstamp" "${BACKUP_TREE}/" "${REMOTE_BASE}$Timestamp/"
	fi
fi

if [ $? -eq 0 ]
then
	echo "OK."
else
	die "Failed: rsync returned $?." 71
fi

############################################################

echo -n "4. Saving current tag to ${LIB_DIR}/${Job}.last: "

if [ ! -d ${LIB_DIR} ]
then
	mkdir -p ${LIB_DIR}
	if [ $? -ne 0 ]
	then
		die "Error: could not create state directory ${LIB_DIR}." 80
	fi
fi

if [ "$DryRun"  = "n" ]
then
	echo $Timestamp > ${LIB_DIR}/${Job}.last
	if [ $? -eq 0 ]
	then
		echo "OK."
	else
		die "Failed." 81
	fi
else
	echo "[skipped - dry run]"
fi

echo -n "5. Removing lock file: "

if [ -n "${LOCK_DIR:+x}" ]	# lock dir is optional
then
	rm -f "${LOCK_DIR}/${Job}" && echo "Done." || echo "Failed."
else
	echo "[ skipped - LOCK_DIR not set]"
fi

